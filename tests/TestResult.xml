<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="E:\projects\LudumLinguarum\tests\AllTests.nunit" total="147" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2016-06-14" time="23:01:11">
  <environment nunit-version="2.6.4.14350" clr-version="2.0.50727.8689" os-version="Microsoft Windows NT 6.2.9200.0" platform="Win32NT" cwd="E:\projects\LudumLinguarum\packages\test\NUnit.Runners\tools" machine-name="AXBATTLER" user="enova" user-domain="AXBATTLER" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Test Project" name="E:\projects\LudumLinguarum\tests\AllTests.nunit" executed="True" result="Success" success="True" time="1.610" asserts="0">
    <results>
      <test-suite type="Assembly" name="E:\projects\LudumLinguarum\tests\LudumLinguarum.Tests\bin\Debug\LudumLinguarumLib.Tests.dll" executed="True" result="Success" success="True" time="0.491" asserts="0">
        <results>
          <test-suite type="TestFixture" name="CsvToolsTests" executed="True" result="Success" success="True" time="0.008" asserts="0">
            <results>
              <test-case name="CsvToolsTests.A line with a quoted string and embedded tab should be split appropriately" executed="True" result="Success" success="True" time="0.000" asserts="18" />
              <test-case name="CsvToolsTests.A line with a single quoted string should be split appropriately" executed="True" result="Success" success="True" time="0.000" asserts="18" />
              <test-case name="CsvToolsTests.A line with a triple-quoted string ended with a format token should be split appropriately" executed="True" result="Success" success="True" time="0.000" asserts="18" />
              <test-case name="CsvToolsTests.A line with a triple-quoted string should be split appropriately" executed="True" result="Success" success="True" time="0.000" asserts="18" />
              <test-case name="CsvToolsTests.A line with non-quoted strings should be split appropriately" executed="True" result="Success" success="True" time="0.000" asserts="18" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests" executed="True" result="Success" success="True" time="0.061" asserts="0">
            <results>
              <test-case name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests.Scanning a string that matches one of the strings in the dictionary, and has some excess" executed="True" result="Success" success="True" time="0.026" asserts="1" />
              <test-case name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests.Scanning a string that's an exact match for one of the strings in the dictionary" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests.Scanning a string that's not long enough to match any of the strings in the dictionary" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests.Scanning a string where a match exists at the end of the string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests.Scanning a string where a match exists in the middle of the string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests.Scanning a string with two matches, where their dictionary entries have the same hash" executed="True" result="Success" success="True" time="0.016" asserts="1" />
              <test-case name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests.Scanning a string with two non-overlapping matches" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests.Scanning a string with two overlapping matches" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+FixedLengthRabinKarpStringScannerTests.Scanning an empty string" executed="True" result="Success" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="DebugToolsTests+RabinFingerprintHasherTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
            <results>
              <test-case name="DebugToolsTests+RabinFingerprintHasherTests.Seeding with a single byte" executed="True" result="Success" success="True" time="0.002" asserts="5" />
              <test-case name="DebugToolsTests+RabinFingerprintHasherTests.Seeding with an empty array" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="DebugToolsTests+RabinFingerprintHasherTests.Seeding with two bytes" executed="True" result="Success" success="True" time="0.000" asserts="5" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="DebugToolsTests+RabinKarpStringScannerTests" executed="True" result="Success" success="True" time="0.075" asserts="0">
            <results>
              <test-case name="DebugToolsTests+RabinKarpStringScannerTests.Scanning a string with a minimal match" executed="True" result="Success" success="True" time="0.057" asserts="1" />
              <test-case name="DebugToolsTests+RabinKarpStringScannerTests.Scanning a string with contained spans, and matching the longest one" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="DebugToolsTests+RabinKarpStringScannerTests.Scanning a string with overlapping matches" executed="True" result="Success" success="True" time="0.006" asserts="1" />
              <test-case name="DebugToolsTests+RabinKarpStringScannerTests.Scanning a string with two matches" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="DebugToolsTests+RabinKarpStringScannerTests.Scanning an empty string" executed="True" result="Success" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="DebugToolsTests+StreamStringScannerTests" executed="True" result="Success" success="True" time="0.013" asserts="0">
            <results>
              <test-case name="DebugToolsTests+StreamStringScannerTests.Case insensitivity of matching" executed="True" result="Success" success="True" time="0.004" asserts="1" />
              <test-case name="DebugToolsTests+StreamStringScannerTests.Scanning a string with a match, and some extra characters beyond the match" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+StreamStringScannerTests.Scanning a string with a single match" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="DebugToolsTests+StreamStringScannerTests.Scanning a string with no matches" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+StreamStringScannerTests.Scanning an empty string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="DebugToolsTests+TextScannerTests" executed="True" result="Success" success="True" time="0.021" asserts="0">
            <results>
              <test-case name="DebugToolsTests+TextScannerTests.Matching a single string" executed="True" result="Success" success="True" time="0.004" asserts="1" />
              <test-case name="DebugToolsTests+TextScannerTests.Matching is case insensitive" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+TextScannerTests.Matching multiple strings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+TextScannerTests.Matching no strings from a valid file" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+TextScannerTests.Returning the longest possible match" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+TextScannerTests.Scanning an empty file returns no strings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="DebugToolsTests+TextScannerTests.Skip strings that are shorter than the configured minimum" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="LLDatabaseTests+LLDatabaseTests" executed="True" result="Success" success="True" time="0.187" asserts="0">
            <results>
              <test-case name="LLDatabaseTests+LLDatabaseTests.Adding a card" executed="True" result="Success" success="True" time="0.101" asserts="2" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Adding a game" executed="True" result="Success" success="True" time="0.004" asserts="2" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Adding a lesson" executed="True" result="Success" success="True" time="0.003" asserts="2" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.CreateOrUpdateCard" executed="True" result="Success" success="True" time="0.002" asserts="3" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.CreateOrUpdateGame" executed="True" result="Success" success="True" time="0.002" asserts="3" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.CreateOrUpdateLesson" executed="True" result="Success" success="True" time="0.002" asserts="3" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Deleting a card" executed="True" result="Success" success="True" time="0.004" asserts="3" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Deleting a game" executed="True" result="Success" success="True" time="0.011" asserts="4" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Deleting a game deletes all lessons and cards associated with it" executed="True" result="Success" success="True" time="0.010" asserts="7" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Deleting a lesson" executed="True" result="Success" success="True" time="0.004" asserts="3" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Deleting a lesson deletes all cards associated with it" executed="True" result="Success" success="True" time="0.005" asserts="7" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Getting available languages for a lesson" executed="True" result="Success" success="True" time="0.006" asserts="2" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Getting cards by lesson" executed="True" result="Success" success="True" time="0.003" asserts="3" />
              <test-case name="LLDatabaseTests+LLDatabaseTests.Getting cards by lesson and language" executed="True" result="Success" success="True" time="0.002" asserts="3" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="LudumLinguarumLibTests2" executed="True" result="Success" success="True" time="0.002" asserts="0">
            <results>
              <test-suite type="TestFixture" name="PluginManagerTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="LudumLinguarumLibTests2.PluginManagerTests.Dummy test" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="SrtToolsTests+SrtToolsTests" executed="True" result="Success" success="True" time="0.040" asserts="0">
            <results>
              <test-case name="SrtToolsTests+SrtToolsTests.Extracting a .csv file containing a single .srt entry" executed="True" result="Success" success="True" time="0.017" asserts="1" />
              <test-case name="SrtToolsTests+SrtToolsTests.Parsing a .csv file with multiple .srt entries, including carry-over of previous values" executed="True" result="Success" success="True" time="0.004" asserts="3" />
              <test-case name="SrtToolsTests+SrtToolsTests.Parsing a single .srt entry" executed="True" result="Success" success="True" time="0.005" asserts="1" />
              <test-case name="SrtToolsTests+SrtToolsTests.Parsing a single blank subtitle" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="SrtToolsTests+SrtToolsTests.Parsing a single entry .csv file with an empty &quot;SubtitleIdEnd&quot; field, which should default to the &quot;SubtitleIdStart&quot; field" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="SrtToolsTests+SrtToolsTests.Parsing an .srt entry that has more than one line in the subtitle" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="SrtToolsTests+SrtToolsTests.Parsing an incomplete .srt entry" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="SrtToolsTests+SrtToolsTests.Parsing multiple .srt entries" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="SrtToolsTests+SrtToolsTests.Parsing multiple .srt entries with a malformed first entry" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="SrtToolsTests+SrtToolsTests.Parsing of a single entry .csv file with .srt extraction information" executed="True" result="Success" success="True" time="0.000" asserts="2" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="StringExtractorsTests+StringExtractorsTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
            <results>
              <test-case name="StringExtractorsTests+StringExtractorsTests.Extracting with a single entry" executed="True" result="Success" success="True" time="0.004" asserts="1" />
              <test-case name="StringExtractorsTests+StringExtractorsTests.Extracting with multiple entries" executed="True" result="Success" success="True" time="0.005" asserts="1" />
              <test-case name="StringExtractorsTests+StringExtractorsTests.Extracting without any extraction entries" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="TrieTests+TrieTests" executed="True" result="Success" success="True" time="0.042" asserts="0">
            <results>
              <test-case name="TrieTests+TrieTests.Build trie from disjoint words" executed="True" result="Success" success="True" time="0.016" asserts="1" />
              <test-case name="TrieTests+TrieTests.Build trie from empty array" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Build trie from empty string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Build trie from non-overlapping words" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Build trie from overlapping words" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Build trie from single char" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Build trie from two chars" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Empty trie doesn't contain a string" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="TrieTests+TrieTests.Matching is case-insensitive" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.NextNode() returns None for non-matching next character" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="TrieTests+TrieTests.NextNode() returns Some for matching next character" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Trie doesn't match empty string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Trie.Contains() returns false on a string that's too long" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Trie.Contains() returns false on non-matching string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Trie.Contains() returns false on non-terminal string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Trie.Contains() returns true on a matching string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TrieTests+TrieTests.Trie.Contains() returns true on a matching string that reaches a terminal node" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="E:\projects\LudumLinguarum\tests\InfinityAuroraEnginePlugins.Tests\bin\Debug\InfinityAuroraEnginePlugins.Tests.dll" executed="True" result="Success" success="True" time="0.183" asserts="0">
        <results>
          <test-suite type="TestFixture" name="GFFFileTypesTests+GatherStringsTests" executed="True" result="Success" success="True" time="0.131" asserts="0">
            <results>
              <test-case name="GFFFileTypesTests+GatherStringsTests.GatherStrings() doesn't follow links in the dialogue" executed="True" result="Success" success="True" time="0.056" asserts="1" />
              <test-case name="GFFFileTypesTests+GatherStringsTests.GatherStrings() on a dialogue with multiple answers on a node" executed="True" result="Success" success="True" time="0.007" asserts="1" />
              <test-case name="GFFFileTypesTests+GatherStringsTests.GatherStrings() on a multiple line dialogue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="GFFFileTypesTests+GatherStringsTests.GatherStrings() on a single-line dialogue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="GFFFileTypesTests+GatherStringsTests.GatherStrings() on a two-line dialogue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="GFFFileTypesTests+GatherStringsTests.GatherStrings() on invalid dialogue returns nothing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="InfinityAuroraEnginePluginsTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
            <results>
              <test-suite type="TestFixture" name="ArchiveFilesTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="InfinityAuroraEnginePluginsTests.ArchiveFilesTests.Placeholder test" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="TwoDATests+TwoDATests" executed="True" result="Success" success="True" time="0.041" asserts="0">
            <results>
              <test-case name="TwoDATests+TwoDATests.Default value is used for indices outside the bounds of the 2DA" executed="True" result="Success" success="True" time="0.019" asserts="1" />
              <test-case name="TwoDATests+TwoDATests.Empty value is returned for ***" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="TwoDATests+TwoDATests.Extracting by column name" executed="True" result="Success" success="True" time="0.002" asserts="9" />
              <test-case name="TwoDATests+TwoDATests.Extracting by row and column indices" executed="True" result="Success" success="True" time="0.000" asserts="9" />
              <test-case name="TwoDATests+TwoDATests.Extracting float values" executed="True" result="Success" success="True" time="0.003" asserts="1" />
              <test-case name="TwoDATests+TwoDATests.Extracting integer values" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="TwoDATests+TwoDATests.Loading a simple 2DA" executed="True" result="Success" success="True" time="0.002" asserts="2" />
              <test-case name="TwoDATests+TwoDATests.Quoted cell values in 2DAs" executed="True" result="Success" success="True" time="0.000" asserts="2" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="E:\projects\LudumLinguarum\tests\OneOffGamesPlugin.Tests\bin\Debug\OneOffGamesPlugin.Tests.dll" executed="True" result="Success" success="True" time="0.446" asserts="0">
        <results>
          <test-suite type="TestFixture" name="JetSetRadioTests+JetSetRadioTests" executed="True" result="Success" success="True" time="0.133" asserts="0">
            <results>
              <test-case name="JetSetRadioTests+JetSetRadioTests.Counting of nulls in readUntilTooManyNulls" executed="True" result="Success" success="True" time="0.045" asserts="5" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Getting a custom instructions string set with a single string" executed="True" result="Success" success="True" time="0.026" asserts="1" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Getting a custom instructions string set with multiple strings" executed="True" result="Success" success="True" time="0.002" asserts="1" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Parsing custom instructions content with a single node" executed="True" result="Success" success="True" time="0.003" asserts="1" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Parsing custom instructions content with an embedded node" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Parsing custom instructions content with an image node" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Read until too many nulls, with one null" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Read until too many nulls, with two nulls" executed="True" result="Success" success="True" time="0.000" asserts="3" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Reading a single null-delimited string set" executed="True" result="Success" success="True" time="0.010" asserts="2" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Reading multiple null-delimited string sets" executed="True" result="Success" success="True" time="0.001" asserts="3" />
              <test-case name="JetSetRadioTests+JetSetRadioTests.Skipping embedded images in custom instructions strings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MadballsBaboInvasionTests+MadballsBaboInvasionTests" executed="True" result="Success" success="True" time="0.076" asserts="0">
            <results>
              <test-case name="MadballsBaboInvasionTests+MadballsBaboInvasionTests.Brace removal is non-greedy" executed="True" result="Success" success="True" time="0.063" asserts="1" />
              <test-case name="MadballsBaboInvasionTests+MadballsBaboInvasionTests.Bracket removal is non-greedy" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="MadballsBaboInvasionTests+MadballsBaboInvasionTests.Calling stripFormattingTags doesn't affect strings without formatting tags" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="MadballsBaboInvasionTests+MadballsBaboInvasionTests.Calling stripFormattingTags removes all tags and substitutions" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="MadballsBaboInvasionTests+MadballsBaboInvasionTests.Calling stripFormattingTags removes contents inside brackets" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="MadballsBaboInvasionTests+MadballsBaboInvasionTests.Calling stripFormattingTags removes substitutions of the format {#}" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="MadballsBaboInvasionTests+MadballsBaboInvasionTests.Calling stripFormattingTags removes tags of the format ^###" executed="True" result="Success" success="True" time="0.000" asserts="3" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MagickaTests+MagickaTests" executed="True" result="Success" success="True" time="0.083" asserts="0">
            <results>
              <test-case name="MagickaTests+MagickaTests.Calling generateCardsForXml() returns an array of CardRecords, based on the contents of the first two columns of each Row" executed="True" result="Success" success="True" time="0.065" asserts="1" />
              <test-case name="MagickaTests+MagickaTests.Calling getFirstTwoCellsForRow() returns the first two XElements of Cell descendants" executed="True" result="Success" success="True" time="0.002" asserts="2" />
              <test-case name="MagickaTests+MagickaTests.Calling getFirstTwoColumnsForWorksheet() returns an array of tuples of the strings of the first two columns of each row after the first" executed="True" result="Success" success="True" time="0.001" asserts="3" />
              <test-case name="MagickaTests+MagickaTests.Calling getStringForCell() returns an empty string if there is no Data descendant" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="MagickaTests+MagickaTests.Calling getStringForCell() returns the value of the Data descendant" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="MagickaTests+MagickaTests.Calling stripFormattingCodes has no effect on a tuple with no formatting codes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="MagickaTests+MagickaTests.Calling stripFormattingCodes removes formatting codes if present" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="OrcsMustDieTests+OrcsMustDieTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
            <results>
              <test-case name="OrcsMustDieTests+OrcsMustDieTests.Calling generateCardsForXml returns a card for an XML document with a single localized string" executed="True" result="Success" success="True" time="0.004" asserts="1" />
              <test-case name="OrcsMustDieTests+OrcsMustDieTests.Calling generateKVForTextElement returns a pair of the '_locID' element, and the value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="PillarsOfEternityTests+PillarsOfEternityTests" executed="True" result="Success" success="True" time="0.028" asserts="0">
            <results>
              <test-case name="PillarsOfEternityTests+PillarsOfEternityTests.Calling extractDataFromEntry returns a tuple of the ID, DefaultText if FemaleText is empty" executed="True" result="Success" success="True" time="0.003" asserts="1" />
              <test-case name="PillarsOfEternityTests+PillarsOfEternityTests.Calling extractDataFromEntry returns a tuple of the ID, DefaultText, and FemaleText" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="PillarsOfEternityTests+PillarsOfEternityTests.Calling generateCardsForXml returns a card for an XML document with a single localized string" executed="True" result="Success" success="True" time="0.018" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="PuzzleQuestGamesTests+PuzzleQuestGamesTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
            <results>
              <test-case name="PuzzleQuestGamesTests+PuzzleQuestGamesTests.Calling generateCardsForXml returns a card for an XML document with a single localized string" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="PuzzleQuestGamesTests+PuzzleQuestGamesTests.Calling generateKVForTextElement returns a pair of the 'tag' element, and the value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="SimpleGamesTests+HatofulBoyfriendTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
            <results>
              <test-case name="SimpleGamesTests+HatofulBoyfriendTests.Format tokens are stripped from the string by stripHbFormattingTokens" executed="True" result="Success" success="True" time="0.002" asserts="1" />
              <test-case name="SimpleGamesTests+HatofulBoyfriendTests.Newline tokens are replaced with a space by stripHbFormattingTokens" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="SimpleGamesTests+HatofulBoyfriendTests.Non-format tokens are ignored by stripHbFormattingTokens" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="SimpleGamesTests+MagicalDropVTests" executed="True" result="Success" success="True" time="0.019" asserts="0">
            <results>
              <test-case name="SimpleGamesTests+MagicalDropVTests.GeneratedStringMapFromXml" executed="True" result="Success" success="True" time="0.010" asserts="1" />
              <test-case name="SimpleGamesTests+MagicalDropVTests.WellFormedXmlUnchangedBySanitization" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="SimpleGamesTests+MagicalDropVTests.XmlAmpersandsEscapedBySanitization" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="SimpleGamesTests+MagicalDropVTests.XmlStringPlaceholdersRemovedBySanitization" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="WormsArmageddonTests+WormsArmageddonTests" executed="True" result="Success" success="True" time="0.034" asserts="0">
            <results>
              <test-case name="WormsArmageddonTests+WormsArmageddonTests.A partial mapping followed by a single-line string mapping are both recognized" executed="True" result="Success" success="True" time="0.011" asserts="1" />
              <test-case name="WormsArmageddonTests+WormsArmageddonTests.Calling foldStringLines reads one partial mapping" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="WormsArmageddonTests+WormsArmageddonTests.Calling foldStringLines reads one single-line string mapping" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="WormsArmageddonTests+WormsArmageddonTests.Calling foldStringLines reads two single-line string mappings" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="WormsArmageddonTests+WormsArmageddonTests.Calling foldStringLines with one partial mapping containing two strings" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="WormsArmageddonTests+WormsArmageddonTests.Calling getAccumulatedString if there is no accumulating key returns an empty list" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="WormsArmageddonTests+WormsArmageddonTests.Calling getAccumulatedString returns a tuple of the accumulating key and the reversed accumulated strings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="XUIGamesTests+XUIGamesTests" executed="True" result="Success" success="True" time="0.030" asserts="0">
            <results>
              <test-case name="XUIGamesTests+XUIGamesTests.The extractXUITabDelimited function creates a set of cards for all data lines" executed="True" result="Success" success="True" time="0.017" asserts="3" />
              <test-case name="XUIGamesTests+XUIGamesTests.The generateCardsForRow function creates a card with a key equal to the row index, key, and category concatenated" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="XUIGamesTests+XUIGamesTests.The generateCardsForRow function creates the appropriate number of card entries" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="XUIGamesTests+XUIGamesTests.The languageForXUITag function returns 'ja' for 'jp'" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="XUIGamesTests+XUIGamesTests.The languageForXUITag function returns the tag for all language tags except 'jp'" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="XUIGamesTests+XUIGamesTests.The languageTagsForHeaderRow function skips blank entries" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="XUIGamesTests+XUIGamesTests.The languageTagsForHeaderRow function skips the first two entries in the row" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>